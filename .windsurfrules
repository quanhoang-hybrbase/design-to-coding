## Tech Stack
- **Front-end:** NextJS 15 ([Docs](https://nextjs.org/docs))
- **Styling:** Tailwindcss 4 ([Docs](https://tailwindcss.com/docs))
- **Language:** Typescript
- **UI Library:** Shadcn UI ([Docs](https://ui.shadcn.com/docs))
- **Package Manager:** NPM
- **Icon Library:** lucide-react ([Docs](https://lucide.dev/))
- **Testing:** Jest ([Docs](https://jestjs.io/docs/getting-started))
- **OS:** Windows 10

## Project structure
Follow the Bulletproof React architecture pattern (refer to: https://github.com/alan2207/bulletproof-react/blob/master/docs/project-structure.md):
- components/ 
    - ui/(shadcn-ui components default installation folder)
    - core/(shared components or section templates to build hi-fidelity complex UIs, built upon shadcn-ui components)
        - [component-name] / 
            - src/ (the component itself or sub-components. For example: List, List-Item)
            - tests/ (unit tests for this component)
            - types/ (TypeScript types for this component)
            - hooks/ (hooks used only by this component)
    - [custom-core-component-name]/ (customized components/sections built upon core components, shared across pages and features)
        - src/...
- features/ (feature-based modules)
    - [feature-name]/
    - api/ (API calls related to the feature)
    - components/ (components used only by this feature. Each component follows the defined "[component-name]/..." structure above)
    - stores/ (state stores for this feature)
    - tests/ (unit tests for this feature)
    - types/ (TypeScript types for this feature)
    - hooks/ (hooks used only by this feature)
    - utils/ (utility functions specific to this feature)
    - index.ts (one entry file public export - optional)
- hooks/ (shared hooks used across the application)
- lib/ (re-exports from libraries and our own abstractions)
- providers/ (application providers)
- stores/ (global state stores)
- types/ (shared TypeScript types)
- utils/ (shared utility functions)
- app/ (Nextjs pages)
    - ([group-route])/ (related routes grouped together. For example: marketing)
        - [route]/ (specific route under the group)
            - page.js - Main content for a route
            - layout.tsx - Shared UI for segments and children
            - loading.tsx - Loading UI
            - error.tsx - Error UI
            - not-found.tsx - Not found UI
            - route.ts - API endpoints
            - [component-name]/ (optional)
- public / 
    - assets/ (static files like images, fonts, etc.)


## For frontend development, ALWAYS:
- Use theme variables from `global.css` and Tailwind utilities only for styling consistency. Never use arbitrary values.
- Use Shadcn components (from "components\ui") or core components (located at "components\core") only.
- Use this command only `npx shadcn@latest add <component-name>` whenever you need to install shadcn components. DONT EVER use `npx shadcn-ui@latest add <component-name>`
- Code with mobile-first, apply responsive principles for flexibility across devices.
- Don't generate unit tests unless I explicitly ask you to.
- Inform me if you need to use components from other folders or third-party libraries
- Strictly follow the instructions defined in PRD.md and the given UI. 
    - For any component if you see the "core" in the doc, that means that existing core component you need to reuse. If you see "shadcn", that means that existing shadcn component you need to reuse.
    - While following requirements, be sure to update the status of the component/feature in the doc
- Follow NextJS best practices:
    - Utilize App Router for routing
    - Implement proper error boundaries
    - Image component for optimized images. Inform me if external links detected to replace with local assets
    - Link component for client-side navigation
    - Head component for metadata
    - Implement proper loading states
    - Use 'use client' directive only when necessary: Event listeners, Browser APIs, State management, Client-side-only libraries

## When implementing features
- Each feature directory should contain domain-specific code for a given feature
- Expose public API via `index.ts`

## Side notes
- When creating new folders using terminal commands, create one by one by using `mkdir`. DONT USE `mkdir -p`
- When I say "commit":
    - commit the changes you have made so far and push to the remote Github repo
    - Update what you have completed/in-progress in docs\work-logs.md along with your learning and insights. Organize all logs neatly  by date